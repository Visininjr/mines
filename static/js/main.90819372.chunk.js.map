{"version":3,"sources":["Game.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["MS","setup","b","generateBoard","c1","c2","turn","moveLimit","moves","clickCell","G","ctx","id","splitId","split","i","j","currentPlayer","handClick","rightClick","space","open","INVALID_MOVE","flag","endIf","Win","winner","Lose","onEnd","console","log","gameover","board","mine","q","getNeighbors","push","length","shift","cell","neighborMineCount","forEach","x","y","cells","ret","filter","c","size","mineCount","Array","map","e","audio","assignMines","n","s","mc","rand","Math","floor","random","ri","rj","includes","addOnetoNeighbors","max","min","MDLOW","Audio","MDHIGH","styles","button","backgroundColor","border","color","padding","textAlign","textDecoration","display","fontSize","marginTop","marginBottom","container","paddingTop","margin","width","height","minHeight","htpcontain","justifyContent","alignSelf","lineHeight","legend","position","left","top","legend2","right","playAgain","paddingBottom","marginLeft","marginRight","borderRadius","fontWeight","switch","transform","text","table","App","Client","game","props","useState","start","updateStart","updateTurn","switchScreen","updateSwitch","updateWinner","tbody1","updateT1body","tbody2","updateT2body","flagC1","updateFlagC1","flagC2","updateFlagC2","playLow","play","playHigh","handleClick","parsedId","parseInt","handleStop","gamover","setTimeout","handleRightClick","preventDefault","handleEnter","target","classList","pause","currentTime","createTbody","cboard","k","tbody","flagCount","style","className","onClick","onContextMenu","onMouseEnter","onMouseLeave","useEffect","load","loop","t1body","t2body","undefined","window","location","reload","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90819372.chunk.js","sourcesContent":["import { INVALID_MOVE } from 'boardgame.io/core';\n\nexport const BOARDLENGTH = 10 // boardsize is boardlength^2\nexport const BOMBS = 50\n\n// by design the audio feature of mine detection is not perfect. For example, one neighboring mine to another mine may not play a sound \n\nexport const MS = {\n    setup: () => {\n        let b = generateBoard(BOARDLENGTH, BOMBS)\n        return ({ c1: b, c2:  b})\n    },\n  \n    turn: { // turn based game\n        moveLimit: 1,\n    },\n\n    moves: {\n      clickCell: (G, ctx, id) => { // id is a string\n        let splitId = id.split(' ')\n        let i = splitId[0]\n        let j = splitId[1]\n        if (ctx.currentPlayer === '0') { // player 1\n            handClick(G.c1, ctx, i, j)\n        } else { // player 2\n            handClick(G.c2, ctx, i, j)\n        }\n      },\n\n      rightClick: (G, ctx, id) => {\n        let splitId = id.split(' ')\n        let i = splitId[0]\n        let j = splitId[1]\n        if (ctx.currentPlayer === '0') { // player 1\n            let space = G.c1[i][j]\n            if (space.open) {\n                return INVALID_MOVE;\n            }\n            space.flag = !space.flag\n        } else { // player 2\n            let space = G.c2[i][j]\n            if (space.open) {\n                return INVALID_MOVE;\n            }\n            space.flag = !space.flag\n        }\n      }\n    },\n\n    endIf: (G, ctx) => {\n        if (Win(G.c1)) {\n            return { winner: 0 };\n        }\n        if (Win(G.c2)) {\n            return { winner: 1 };\n        }\n        if (Lose(G.c1)) {\n            return { winner: 1 };\n        }\n        if (Lose(G.c2)) {\n            return { winner: 0 }; \n        }\n    },\n\n    onEnd: (G, ctx) => {\n        console.log(ctx.gameover)\n    }\n};\n\nconst handClick = (board, ctx, i, j) => { // recursively handle and expand board upon click\n    if (board[i][j].mine) { \n        board[i][j].open = 1\n        return\n    }\n    let q = [] // queue cells to be revealed\n    let neighbors = getNeighbors(i, j)\n    q.push([i, j])\n    while (q.length > 0) { // keep going until we're out of cells\n        [i, j] = q.shift()\n        let cell = board[i][j] // load first cell\n        if (cell.open) continue // already seen\n        if (cell.mine) continue // lose\n        if (cell.flag) continue // don't reveal flagged locations\n        cell.open = true\n        if (cell.neighborMineCount) { // display number of neighbor bombs here\n\n        } else { // blank spot, repeat for neighbors     \n            neighbors = getNeighbors(i, j)\n            neighbors.forEach(([x, y]) => {\n                q.push([x, y])\n            })\n        } \n    }\n}\n\nconst Win = cells => {\n    var ret = 0\n    cells.forEach(cell => {\n        ret += cell.filter(c => (c.flag && c.mine)).length\n    })\n    return ret === BOMBS\n}\n\nconst Lose = cells => { \n    var ret = 0\n    cells.forEach(cell => {\n        ret += cell.filter(c => (c.open && c.mine)).length // someone clicked on a mine\n    })\n    return ret \n}\n\nconst Cell = (open, flag, mine, neighborMineCount, audio) => {\n    return {\n        open: open,\n        flag: flag,\n        mine: mine,\n        neighborMineCount: neighborMineCount,\n        audio: audio\n    }\n}\n\nconst generateBoard = (size, mineCount) => {\n    let b = [...Array(size)].map(e => Array(size)) // n x n array\n    for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n            b[i][j] = Cell(0, 0, 0, 0, 0) \n        }\n    }\n    b = assignMines(b, mineCount)\n    return b\n}\n\nconst assignMines = (b, n) => {\n    let s = b.length\n    let mc = []\n    for (let i = 0; i < n; i++) { // generate n mines\n        let rand = Math.floor(Math.random() * 3)\n        let ri = Math.floor(Math.random() * s)\n        let rj = Math.floor(Math.random() * s)\n        let c = ri + ' ' + rj\n        while (mc.includes(c)) { // guarentee generating new bomb\n            ri = Math.floor(Math.random() * s)\n            rj = Math.floor(Math.random() * s)\n            c = ri + ' ' + rj\n        }\n        mc.push(c)\n        b[ri][rj].mine = 1\n\n        // audio output, only 2/3's of mines have audio capabilities\n        if (rand === 1) b[ri][rj].audio = 1\n        else if (rand === 2) b[ri][rj].audio = 3\n        b = addOnetoNeighbors(b, ri, rj, rand)\n    }\n    return b\n}\n\nconst addOnetoNeighbors = (b, i, j, rand) => {\n    let neighbors = getNeighbors(i, j)\n    neighbors.forEach(([x,y]) => {\n        b[x][y].neighborMineCount += 1\n        if (rand === 1 && !b[x][y].mine) b[x][y].audio = 2\n        else if (rand === 2 && !b[x][y].mine) b[x][y].audio = 4\n    })\n    return b\n}\n\nconst getNeighbors = (i, j) => {\n    let ret = []\n    let s = BOARDLENGTH\n    for (let x = Math.max(0, i-1); x <= Math.min(i+1, s-1); x++) {\n        for (let y = Math.max(0, j-1); y <= Math.min(j+1, s-1); y++) {\n            if ((x !== i || y !== j)) {\n                ret.push([x, y])\n            }\n        }\n    }\n    return ret\n}","import React, { useState, useEffect } from 'react'\nimport { BOARDLENGTH, BOMBS } from './Game'\n\nconst MDLOW = new Audio('audio/mdlow.mp3');\nconst MDHIGH = new Audio('audio/mdhigh.mp3');\n\nexport default function MineBoard(props) {\n    // start screen toggle\n    const [start, updateStart] = useState(true)\n\n    // toggle for each turn\n    const [turn, updateTurn] = useState(0)\n    const [switchScreen, updateSwitch] = useState(false)\n\n    // end condition based on props.G, useState to render change\n    const [winner, updateWinner] = useState(null)\n\n    // boards\n    const [tbody1, updateT1body] = useState([])\n    const [tbody2, updateT2body] = useState([])\n\n    // flag count\n    const [flagC1, updateFlagC1] = useState(0)\n    const [flagC2, updateFlagC2] = useState(0)\n\n    // play low sound\n    const playLow = () => {\n        MDLOW.play();\n    }\n\n    const playHigh = () => {\n        MDHIGH.play()\n    }\n    \n    // stop low sound\n    const stopLow = () => {\n        MDLOW.pause();\n        MDLOW.currentTime = 0;\n    }\n\n    // stop high sound\n    const stopHigh = () => {\n        MDHIGH.pause();\n        MDHIGH.currentTime = 0;\n    }\n\n    const handleClick = id => {\n        let parsedId = id.split(' ')\n        let i = parseInt(parsedId[0])\n        let j = parseInt(parsedId[1])\n\n        handleStop()\n\n        if (props.ctx.currentPlayer === '0') {\n            let space = props.G.c1[i][j]\n            if (space.open || space.flag) return\n        }\n        if (props.ctx.currentPlayer === '1') {\n            let space = props.G.c2[i][j]\n            if (space.open || space.flag) return\n        }\n        props.moves.clickCell(id)\n        updateTurn((1 - turn))\n        if (props.ctx.gamover) return\n        // toggle boards\n        updateSwitch(true)\n        setTimeout(() => {\n            updateSwitch(false)\n        }, 2000)  \n    }\n\n    const handleRightClick = (e, id) => {\n        e.preventDefault()\n        handleStop()\n        props.moves.rightClick(id)\n        updateTurn(1 - turn)\n        if (props.ctx.gamover) return\n        updateSwitch(true)\n        setTimeout(() => {\n            updateSwitch(false)\n        }, 2000)  \n    }\n\n    const handleEnter = (e, id) => {\n        // get if mine, play appropriate sound\n        let parsedId = id.split(' ')\n        let i = parseInt(parsedId[0])\n        let j = parseInt(parsedId[1])\n        if (e.target.classList[0] === '0') {\n            // 1 and 2 can only happen on p1's turn, 3 and 4 on p2's\n            if (props.G.c1[i][j].audio === 1) {\n                playHigh()\n            } else if (props.G.c1[i][j].audio === 2) {\n                playLow()\n            }\n        } else if (e.target.classList[0] === '1') {\n            if (props.G.c2[i][j].audio === 3) {\n                playHigh()\n            } else if (props.G.c2[i][j].audio === 4) {\n                playLow()\n            }\n        }   \n    }\n\n    const handleStop = () => {\n        // stop all sounds\n        stopLow()\n        stopHigh()\n    }\n\n    const createTbody = (cboard, k) => {\n        let tbody = []\n        let flagCount = 0\n        for (let i = 0; i < BOARDLENGTH; i++) {\n            let cells = [];\n            for (let j = 0; j < BOARDLENGTH; j++) {\n                const id = i + ' ' + j\n                // may have to handle front end rendering of cells here\n                cells.push(\n                    <td style={{...styles.cell, ...{ backgroundColor: cboard[i][j].open && !cboard[i][j].neighborMineCount && !cboard[i][j].mine ? '#CDCDCD' : 'white' }}} key={id} className={k} onClick={() => handleClick(id)} onContextMenu={(e)=> handleRightClick(e, id)} onMouseEnter={(e) => handleEnter(e, id)} onMouseLeave={() => handleStop()}>\n                        {cboard[i][j].open ? (cboard[i][j].mine ? '💣' : (cboard[i][j].neighborMineCount ? cboard[i][j].neighborMineCount : null)) : (cboard[i][j].flag ? '🚩' : null)} \n                    </td>\n                );\n                if (cboard[i][j].flag) flagCount++\n            }\n            tbody.push(<tr key={i}>{cells}</tr>);\n        }\n        if (k === 1) updateFlagC1(flagCount)\n        else updateFlagC2(flagCount)\n        return tbody\n    }\n\n    useEffect(() => { // load audio on mount, they loop by default\n        MDLOW.load()\n        MDHIGH.load()\n\n        MDLOW.loop = true\n        MDHIGH.loop = true\n    }, [])\n    \n\n    useEffect(() => { // front end update each move\n        let t1body = createTbody(props.G.c1, 0)\n        let t2body = createTbody(props.G.c2, 1)\n\n        updateT1body(t1body)\n        updateT2body(t2body)\n        // eslint-disable-next-line\n    }, [props.G])\n\n    useEffect(() => { // gameover\n        if (props.ctx.gameover !== undefined) {\n            updateWinner(props.ctx.gameover.winner);\n        }\n    }, [props.ctx.gameover])\n\n    return(\n        <div style={styles.container}>\n            {\n                start ?\n                <div style={styles.container}>\n                    <h1 style={{ fontSize: '80px' }}> Mines! </h1>\n                    <button style={ styles.button } onClick={() => { updateStart(false) }}> Click to Start! </button>\n                    <h5 style={{ paddingBottom: '50px' }}> Made by Josh </h5>\n                    <div style={styles.htpcontain}>\n                        <h2> How to play: </h2>\n                        <p> 1. Decide who goes first. </p>\n                        <p> 2. Take turns solving your respective minesweeper boards </p>\n                        <p> 3. Mouse over cells and use audio to help identify mines </p>\n                        <p> 4. Left click to reveal an area. Right click to place/remove a flag.</p>\n                        <p> 5. Audio information is player unique, but boards are identical, so be sure to keep your audio secret. </p>\n                        <p> 6. There are a lot of mines, so feel free to use the audio to work together, lie, or trade information </p>\n                        <p> 7. The game ends when all mines are correctly flagged or someone opens a mine. </p>\n                        <p> 8. When the game is over, the two boards are placed side by side. Feel free to learn from them! </p>\n                    </div>\n                    <div style={styles.legend}>\n                        <p style={{ fontSize: '20px', fontWeight: 'bold' }}> Mines! Quick Guide Table </p>\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td style={styles.c}>left click</td>\n                                    <td style={styles.c}>open cell</td>\n                                </tr>\n                                <tr>\n                                    <td style={styles.c}>flag (right click)</td>\n                                    <td style={styles.c}>🚩</td>\n                                </tr>\n                                <tr>\n                                    <td style={styles.c}>bomb</td>\n                                    <td style={styles.c}>💣</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                :\n                winner !== null ?\n                <div>\n                    <h1 style={styles.text}> Player {winner + 1} wins 🎉🎉</h1>\n                    <button onClick={() => { window.location.reload() }} style={styles.playAgain}> PLAY AGAIN </button>\n                    <h4> Player 1 </h4>\n                    <table style={styles.table}>\n                        <tbody>{tbody1}</tbody>\n                    </table>\n                    <h4> Player 2 </h4>\n                    <table style={styles.table}>\n                        <tbody>{tbody2}</tbody>\n                    </table>\n                </div>\n                :\n                switchScreen ?\n                <div style={styles.switch}>\n                    <h1>Switch Turns</h1>\n                </div>\n                :\n                <div>\n                    <h1 styles={styles.text}> Player {turn + 1}'s turn </h1>\n                    <table id='board' style={styles.table}>\n                        <tbody>{turn ? tbody2 : tbody1}</tbody>\n                    </table>\n                    <table style={styles.legend2}>\n                        <tbody>\n                            <tr>\n                                <td style={styles.c}>🚩 / 💣</td>\n                                <td style={styles.c}>{turn ? flagC1 : flagC2} / {BOMBS}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            }   \n        </div>\n    );\n}\n\nlet styles = {\n    button: {\n        backgroundColor: '#04AA6D',\n        border: 'none',\n        color: 'white',\n        padding: '20px',\n        textAlign: 'center',\n        textDecoration: 'none',\n        display: 'inlineBlock',\n        fontSize: '16px',\n        marginTop: '10px',\n        marginBottom: '5px'\n        \n    },\n    c : {\n        padding: '10px',\n        border: '1px solid black',\n    },\n    container: {\n        paddingTop: '50px',\n        margin: 'auto',\n        width: '100%',\n        height: '100%',\n        textAlign: 'center',\n        minHeight : '100vh'\n    }, \n    htpcontain: {\n        margin: 'auto',\n        justifyContent: 'center',\n        alignSelf: 'center',\n        width: '50%',\n        padding: '10px',\n        border: '2px solid black',\n    },\n    cell: {\n        border: '1px solid #555',\n        width: '50px',\n        height: '50px',\n        lineHeight: '50px',\n        textAlign: 'center',\n    },\n    legend: {\n        position: 'absolute',\n        left: '50px',\n        top: '180px',\n    },\n    legend2: {\n        position: 'absolute',\n        right: '50px',\n        top: '100px',\n    },\n    playAgain: {\n        padding: 10,\n        marginTop: 10,\n        paddingTop: 15,\n        paddingBottom: 15,\n        marginLeft: 30,\n        marginRight: 30,\n        borderRadius: 10,\n        backgroundColor: '#00dddd',\n        color: '#fff',\n        fontSize: 15,\n        fontWeight: 'bold'\n    },\n    switch: {\n        position: 'absolute',\n        top: '30%',\n        left: '50%',\n        transform: 'translate(-50%, -10%)',\n        fontSize: '50px',\n        backgroundColor: '#D22B2B',\n        padding: 20,\n        color: 'white',\n        borderRadius: 10\n    },\n    text: {\n        textAlign: 'center'\n    },\n    table: {\n        marginLeft: 'auto',\n        marginRight: 'auto',\n    }\n\n}","import { Client } from 'boardgame.io/react';\nimport { MS } from './Game';\nimport Board from './Board'\n\nconst App = Client({ \n    game: MS,\n    board: Board,\n    debug: false\n});\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}